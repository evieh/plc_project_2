-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Tup_Y.y
-----------------------------------------------------------------------------

state 0 contains 1 reduce/reduce conflicts.
state 2 contains 1 shift/reduce conflicts.
state 3 contains 1 shift/reduce conflicts.
state 7 contains 2 reduce/reduce conflicts.
state 27 contains 1 shift/reduce conflicts.
state 32 contains 1 reduce/reduce conflicts.
state 42 contains 1 shift/reduce conflicts.
state 51 contains 3 shift/reduce conflicts.
state 53 contains 1 reduce/reduce conflicts.

rule 6 is unused
rule 14 is unused
rule 17 is unused
rule 21 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseTup -> Prog                            (0)
	Prog -> FuncDecs '\n' '!' '\n' FuncTest            (1)
	Pattern -> '(' VarTupInner ')'                     (2)
	Pattern -> VAR                                     (3)
	Pattern -> '#'                                     (4)
	PatternList -> Pattern PatternList                 (5)
	PatternList -> Pattern                             (6)
	PatternList ->                                     (7)
	VarTupInner -> VAR ',' VarTupInner                 (8)
	VarTupInner -> VAR                                 (9)
	VarTupInner ->                                     (10)
	FuncDecLine -> VAR PatternList '|' Expr '=' Expr   (11)
	FuncDecLine -> VAR PatternList '=' Expr            (12)
	FuncDec -> FuncDecLine '\n' FuncDec                (13)
	FuncDec -> FuncDecLine                             (14)
	FuncDec ->                                         (15)
	FuncDecs -> FuncDec '\n' '!' '\n' FuncDecs         (16)
	FuncDecs -> FuncDec                                (17)
	FuncDecs ->                                        (18)
	FuncTest -> VAR ExprList '=' Expr                  (19)
	ExprList -> Expr ExprList                          (20)
	ExprList -> Expr                                   (21)
	ExprList ->                                        (22)
	Expr -> VAR '(' ExprTupInner ')'                   (23)
	Expr -> VAR                                        (24)
	Expr -> '(' Expr ')'                               (25)
	Expr -> '(' ExprTupInner ')'                       (26)
	Expr -> '#'                                        (27)
	Expr -> NUM                                        (28)
	Expr -> Expr Oper Expr                             (29)
	Oper -> '+'                                        (30)
	Oper -> '*'                                        (31)
	Oper -> '-'                                        (32)
	ExprTupInner -> Expr ',' ExprTupInner              (33)
	ExprTupInner -> Expr                               (34)
	ExprTupInner ->                                    (35)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'#'            { TupNull }
	'='            { TupEquals }
	'!'            { TupExclam }
	','            { TupComma }
	'('            { TupLParen }
	')'            { TupRParen }
	'|'            { TupPipe }
	'+'            { TupAdd }
	'*'            { TupMul }
	'-'            { TupSub }
	'\n'           { TupEndl }
	NUM            { TupInt $$ }
	VAR            { TupLabel $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseTup rule  0
	Prog            rule  1
	Pattern         rules 2, 3, 4
	PatternList     rules 5, 6, 7
	VarTupInner     rules 8, 9, 10
	FuncDecLine     rules 11, 12
	FuncDec         rules 13, 14, 15
	FuncDecs        rules 16, 17, 18
	FuncTest        rule  19
	ExprList        rules 20, 21, 22
	Expr            rules 23, 24, 25, 26, 27, 28, 29
	Oper            rules 30, 31, 32
	ExprTupInner    rules 33, 34, 35

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'\n'           reduce using rule 18
			(reduce using rule 15)

	VAR            shift, and enter state 5

	Prog           goto state 6
	FuncDecLine    goto state 2
	FuncDec        goto state 3
	FuncDecs       goto state 4

State 1


	VAR            shift, and enter state 5

	FuncDecLine    goto state 2
	FuncDec        goto state 3
	FuncDecs       goto state 4

State 2

	FuncDec -> FuncDecLine . '\n' FuncDec               (rule 13)
	FuncDec -> FuncDecLine .                            (rule 14)

	'\n'           shift, and enter state 14
			(reduce using rule 14)



State 3

	FuncDecs -> FuncDec . '\n' '!' '\n' FuncDecs        (rule 16)
	FuncDecs -> FuncDec .                               (rule 17)

	'\n'           shift, and enter state 13
			(reduce using rule 17)



State 4

	Prog -> FuncDecs . '\n' '!' '\n' FuncTest           (rule 1)

	'\n'           shift, and enter state 12


State 5

	FuncDecLine -> VAR . PatternList '|' Expr '=' Expr    (rule 11)
	FuncDecLine -> VAR . PatternList '=' Expr           (rule 12)

	'#'            shift, and enter state 9
	'='            reduce using rule 7
	'('            shift, and enter state 10
	'|'            reduce using rule 7
	VAR            shift, and enter state 11

	Pattern        goto state 7
	PatternList    goto state 8

State 6

	%start_parseTup -> Prog .                           (rule 0)

	%eof           accept


State 7

	PatternList -> Pattern . PatternList                (rule 5)
	PatternList -> Pattern .                            (rule 6)

	'#'            shift, and enter state 9
	'='            reduce using rule 7
			(reduce using rule 6)

	'('            shift, and enter state 10
	'|'            reduce using rule 7
			(reduce using rule 6)

	VAR            shift, and enter state 11

	Pattern        goto state 7
	PatternList    goto state 22

State 8

	FuncDecLine -> VAR PatternList . '|' Expr '=' Expr    (rule 11)
	FuncDecLine -> VAR PatternList . '=' Expr           (rule 12)

	'='            shift, and enter state 20
	'|'            shift, and enter state 21


State 9

	Pattern -> '#' .                                    (rule 4)

	'#'            reduce using rule 4
	'='            reduce using rule 4
	'('            reduce using rule 4
	'|'            reduce using rule 4
	VAR            reduce using rule 4


State 10

	Pattern -> '(' . VarTupInner ')'                    (rule 2)

	')'            reduce using rule 10
	VAR            shift, and enter state 19

	VarTupInner    goto state 18

State 11

	Pattern -> VAR .                                    (rule 3)

	'#'            reduce using rule 3
	'='            reduce using rule 3
	'('            reduce using rule 3
	'|'            reduce using rule 3
	VAR            reduce using rule 3


State 12

	Prog -> FuncDecs '\n' . '!' '\n' FuncTest           (rule 1)

	'!'            shift, and enter state 17


State 13

	FuncDecs -> FuncDec '\n' . '!' '\n' FuncDecs        (rule 16)

	'!'            shift, and enter state 16


State 14

	FuncDec -> FuncDecLine '\n' . FuncDec               (rule 13)

	'\n'           reduce using rule 15
	VAR            shift, and enter state 5

	FuncDecLine    goto state 2
	FuncDec        goto state 15

State 15

	FuncDec -> FuncDecLine '\n' FuncDec .               (rule 13)

	'\n'           reduce using rule 13


State 16

	FuncDecs -> FuncDec '\n' '!' . '\n' FuncDecs        (rule 16)

	'\n'           shift, and enter state 32


State 17

	Prog -> FuncDecs '\n' '!' . '\n' FuncTest           (rule 1)

	'\n'           shift, and enter state 31


State 18

	Pattern -> '(' VarTupInner . ')'                    (rule 2)

	')'            shift, and enter state 30


State 19

	VarTupInner -> VAR . ',' VarTupInner                (rule 8)
	VarTupInner -> VAR .                                (rule 9)

	','            shift, and enter state 29
	')'            reduce using rule 9


State 20

	FuncDecLine -> VAR PatternList '=' . Expr           (rule 12)

	'#'            shift, and enter state 24
	'('            shift, and enter state 25
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	Expr           goto state 28

State 21

	FuncDecLine -> VAR PatternList '|' . Expr '=' Expr    (rule 11)

	'#'            shift, and enter state 24
	'('            shift, and enter state 25
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	Expr           goto state 23

State 22

	PatternList -> Pattern PatternList .                (rule 5)

	'='            reduce using rule 5
	'|'            reduce using rule 5


State 23

	FuncDecLine -> VAR PatternList '|' Expr . '=' Expr    (rule 11)
	Expr -> Expr . Oper Expr                            (rule 29)

	'='            shift, and enter state 44
	'+'            shift, and enter state 38
	'*'            shift, and enter state 39
	'-'            shift, and enter state 40

	Oper           goto state 37

State 24

	Expr -> '#' .                                       (rule 27)

	'#'            reduce using rule 27
	'='            reduce using rule 27
	','            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'+'            reduce using rule 27
	'*'            reduce using rule 27
	'-'            reduce using rule 27
	'\n'           reduce using rule 27
	NUM            reduce using rule 27
	VAR            reduce using rule 27
	%eof           reduce using rule 27


State 25

	Expr -> '(' . Expr ')'                              (rule 25)
	Expr -> '(' . ExprTupInner ')'                      (rule 26)

	'#'            shift, and enter state 24
	'('            shift, and enter state 25
	')'            reduce using rule 35
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	Expr           goto state 42
	ExprTupInner   goto state 43

State 26

	Expr -> NUM .                                       (rule 28)

	'#'            reduce using rule 28
	'='            reduce using rule 28
	','            reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'+'            reduce using rule 28
	'*'            reduce using rule 28
	'-'            reduce using rule 28
	'\n'           reduce using rule 28
	NUM            reduce using rule 28
	VAR            reduce using rule 28
	%eof           reduce using rule 28


State 27

	Expr -> VAR . '(' ExprTupInner ')'                  (rule 23)
	Expr -> VAR .                                       (rule 24)

	'#'            reduce using rule 24
	'='            reduce using rule 24
	','            reduce using rule 24
	'('            shift, and enter state 41
			(reduce using rule 24)

	')'            reduce using rule 24
	'+'            reduce using rule 24
	'*'            reduce using rule 24
	'-'            reduce using rule 24
	'\n'           reduce using rule 24
	NUM            reduce using rule 24
	VAR            reduce using rule 24
	%eof           reduce using rule 24


State 28

	FuncDecLine -> VAR PatternList '=' Expr .           (rule 12)
	Expr -> Expr . Oper Expr                            (rule 29)

	'+'            shift, and enter state 38
	'*'            shift, and enter state 39
	'-'            shift, and enter state 40
	'\n'           reduce using rule 12

	Oper           goto state 37

State 29

	VarTupInner -> VAR ',' . VarTupInner                (rule 8)

	')'            reduce using rule 10
	VAR            shift, and enter state 19

	VarTupInner    goto state 36

State 30

	Pattern -> '(' VarTupInner ')' .                    (rule 2)

	'#'            reduce using rule 2
	'='            reduce using rule 2
	'('            reduce using rule 2
	'|'            reduce using rule 2
	VAR            reduce using rule 2


State 31

	Prog -> FuncDecs '\n' '!' '\n' . FuncTest           (rule 1)

	VAR            shift, and enter state 35

	FuncTest       goto state 34

State 32

	FuncDecs -> FuncDec '\n' '!' '\n' . FuncDecs        (rule 16)

	'\n'           reduce using rule 18
			(reduce using rule 15)

	VAR            shift, and enter state 5

	FuncDecLine    goto state 2
	FuncDec        goto state 3
	FuncDecs       goto state 33

State 33

	FuncDecs -> FuncDec '\n' '!' '\n' FuncDecs .        (rule 16)

	'\n'           reduce using rule 16


State 34

	Prog -> FuncDecs '\n' '!' '\n' FuncTest .           (rule 1)

	%eof           reduce using rule 1


State 35

	FuncTest -> VAR . ExprList '=' Expr                 (rule 19)

	'#'            shift, and enter state 24
	'='            reduce using rule 22
	'('            shift, and enter state 25
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	ExprList       goto state 52
	Expr           goto state 53

State 36

	VarTupInner -> VAR ',' VarTupInner .                (rule 8)

	')'            reduce using rule 8


State 37

	Expr -> Expr Oper . Expr                            (rule 29)

	'#'            shift, and enter state 24
	'('            shift, and enter state 25
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	Expr           goto state 51

State 38

	Oper -> '+' .                                       (rule 30)

	'#'            reduce using rule 30
	'('            reduce using rule 30
	NUM            reduce using rule 30
	VAR            reduce using rule 30


State 39

	Oper -> '*' .                                       (rule 31)

	'#'            reduce using rule 31
	'('            reduce using rule 31
	NUM            reduce using rule 31
	VAR            reduce using rule 31


State 40

	Oper -> '-' .                                       (rule 32)

	'#'            reduce using rule 32
	'('            reduce using rule 32
	NUM            reduce using rule 32
	VAR            reduce using rule 32


State 41

	Expr -> VAR '(' . ExprTupInner ')'                  (rule 23)

	'#'            shift, and enter state 24
	'('            shift, and enter state 25
	')'            reduce using rule 35
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	Expr           goto state 49
	ExprTupInner   goto state 50

State 42

	Expr -> '(' Expr . ')'                              (rule 25)
	Expr -> Expr . Oper Expr                            (rule 29)
	ExprTupInner -> Expr . ',' ExprTupInner             (rule 33)
	ExprTupInner -> Expr .                              (rule 34)

	','            shift, and enter state 47
	')'            shift, and enter state 48
			(reduce using rule 34)

	'+'            shift, and enter state 38
	'*'            shift, and enter state 39
	'-'            shift, and enter state 40

	Oper           goto state 37

State 43

	Expr -> '(' ExprTupInner . ')'                      (rule 26)

	')'            shift, and enter state 46


State 44

	FuncDecLine -> VAR PatternList '|' Expr '=' . Expr    (rule 11)

	'#'            shift, and enter state 24
	'('            shift, and enter state 25
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	Expr           goto state 45

State 45

	FuncDecLine -> VAR PatternList '|' Expr '=' Expr .    (rule 11)
	Expr -> Expr . Oper Expr                            (rule 29)

	'+'            shift, and enter state 38
	'*'            shift, and enter state 39
	'-'            shift, and enter state 40
	'\n'           reduce using rule 11

	Oper           goto state 37

State 46

	Expr -> '(' ExprTupInner ')' .                      (rule 26)

	'#'            reduce using rule 26
	'='            reduce using rule 26
	','            reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'+'            reduce using rule 26
	'*'            reduce using rule 26
	'-'            reduce using rule 26
	'\n'           reduce using rule 26
	NUM            reduce using rule 26
	VAR            reduce using rule 26
	%eof           reduce using rule 26


State 47

	ExprTupInner -> Expr ',' . ExprTupInner             (rule 33)

	'#'            shift, and enter state 24
	'('            shift, and enter state 25
	')'            reduce using rule 35
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	Expr           goto state 49
	ExprTupInner   goto state 57

State 48

	Expr -> '(' Expr ')' .                              (rule 25)

	'#'            reduce using rule 25
	'='            reduce using rule 25
	','            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'+'            reduce using rule 25
	'*'            reduce using rule 25
	'-'            reduce using rule 25
	'\n'           reduce using rule 25
	NUM            reduce using rule 25
	VAR            reduce using rule 25
	%eof           reduce using rule 25


State 49

	Expr -> Expr . Oper Expr                            (rule 29)
	ExprTupInner -> Expr . ',' ExprTupInner             (rule 33)
	ExprTupInner -> Expr .                              (rule 34)

	','            shift, and enter state 47
	')'            reduce using rule 34
	'+'            shift, and enter state 38
	'*'            shift, and enter state 39
	'-'            shift, and enter state 40

	Oper           goto state 37

State 50

	Expr -> VAR '(' ExprTupInner . ')'                  (rule 23)

	')'            shift, and enter state 56


State 51

	Expr -> Expr . Oper Expr                            (rule 29)
	Expr -> Expr Oper Expr .                            (rule 29)

	'#'            reduce using rule 29
	'='            reduce using rule 29
	','            reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'+'            shift, and enter state 38
			(reduce using rule 29)

	'*'            shift, and enter state 39
			(reduce using rule 29)

	'-'            shift, and enter state 40
			(reduce using rule 29)

	'\n'           reduce using rule 29
	NUM            reduce using rule 29
	VAR            reduce using rule 29
	%eof           reduce using rule 29

	Oper           goto state 37

State 52

	FuncTest -> VAR ExprList . '=' Expr                 (rule 19)

	'='            shift, and enter state 55


State 53

	ExprList -> Expr . ExprList                         (rule 20)
	ExprList -> Expr .                                  (rule 21)
	Expr -> Expr . Oper Expr                            (rule 29)

	'#'            shift, and enter state 24
	'='            reduce using rule 22
			(reduce using rule 21)

	'('            shift, and enter state 25
	'+'            shift, and enter state 38
	'*'            shift, and enter state 39
	'-'            shift, and enter state 40
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	ExprList       goto state 54
	Expr           goto state 53
	Oper           goto state 37

State 54

	ExprList -> Expr ExprList .                         (rule 20)

	'='            reduce using rule 20


State 55

	FuncTest -> VAR ExprList '=' . Expr                 (rule 19)

	'#'            shift, and enter state 24
	'('            shift, and enter state 25
	NUM            shift, and enter state 26
	VAR            shift, and enter state 27

	Expr           goto state 58

State 56

	Expr -> VAR '(' ExprTupInner ')' .                  (rule 23)

	'#'            reduce using rule 23
	'='            reduce using rule 23
	','            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'+'            reduce using rule 23
	'*'            reduce using rule 23
	'-'            reduce using rule 23
	'\n'           reduce using rule 23
	NUM            reduce using rule 23
	VAR            reduce using rule 23
	%eof           reduce using rule 23


State 57

	ExprTupInner -> Expr ',' ExprTupInner .             (rule 33)

	')'            reduce using rule 33


State 58

	FuncTest -> VAR ExprList '=' Expr .                 (rule 19)
	Expr -> Expr . Oper Expr                            (rule 29)

	'+'            shift, and enter state 38
	'*'            shift, and enter state 39
	'-'            shift, and enter state 40
	%eof           reduce using rule 19

	Oper           goto state 37

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 36
Number of terminals: 13
Number of non-terminals: 13
Number of states: 59
